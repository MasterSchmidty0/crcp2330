class CellGame {
	field Cell player, smallCell, bigCell;
	field int direction; //0=none,1=up,2=down,3=left,4=right

	constructor CellGame new() {
		let player = Cell.new(20, 20, 5);
		let smallCell = Cell.new(100, 20, 4);
		let bigCell = Cell.new(200, 100, 20);
		let direction = 0;
		return this;
	}

    method void dispose() {
        do player.dispose();
        do smallCell.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void collision(Cell a, Cell b) {
    	if ( (a.getSize() > b.getSize()) & 
    		 (a.getX() = b.getX()) &
    		 (a.getY() = b.getY()) ) {

    		do a.incSize(b.getSize());
    		do b.setAlive(false);
            do Output.moveCursor(0, 0);
            do Output.printString("Collision!");
    	}
        do Output.moveCursor(0, 30);
        do Output.printChar(32);
        do Output.printChar(32);
        do Output.printInt(a.getX());
        do Output.printChar(44);
        do Output.printInt(a.getY());
    	return;
    }


    method void run() {
        var char key;
        var boolean exit;

        let exit = false;

        while (~exit) {
            do player.update();
            do smallCell.update();
            do bigCell.update();

            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveCell();
            }

            if (key = 81) {
                let exit = true;
            }
            if (key = 131) {
                let direction = 1;
            }
            if (key = 133) {
                let direction = 2;
            }
            if (key = 130) {
                let direction = 3;
            }
            if (key = 132) {
                let direction = 4;
            }
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveCell();
            }
        }
            
        return;
	}

    method void moveCell() {
        do collision(player, smallCell);
        do collision(player, bigCell);
        if (direction = 1) {
            do player.moveUp();
        }
        if (direction = 2) {
            do player.moveDown();
        }
        if (direction = 3) {
            do player.moveLeft();
        }
        if (direction = 4) {
            do player.moveRight();
        }

        do Sys.wait(5); // Delays the next movement.
        return;
    }
}