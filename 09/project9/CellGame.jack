class CellGame {
	field Cell player, smallCell, bigCell;
	field int direction; //0=none,1=up,2=down,3=left,4=right

	constructor CellGame new() {
		let player = Cell.new(20, 20, 5);
		let smallCell = Cell.new(100, 20, 4);
		let bigCell = Cell.new(200, 100, 20);
		let direction = 0;
		return this;
	}

    method void dispose() {
        do player.dispose();
        do smallCell.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void collision(Cell a, Cell b) {
    	if ((a.getX() = b.getX()) & (a.getY() = b.getY()) & (a.getSize() > b.getSize())) {
    		do a.incSize(a.getSize() + b.getSize());
    		do b.erase();
    	}
    	return;
    }

    method void run() {
        var char key;
        var boolean exit;

        do smallCell.draw();
        do bigCell.draw();

        let exit = false;

        do collision(player, smallCell);

        while (~exit) {
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveCell();
            }

            if (key = 81) {
                let exit = true;
            }
            if (key = 131) {
                let direction = 1;
            }
            if (key = 133) {
                let direction = 2;
            }
            if (key = 130) {
                let direction = 3;
            }
            if (key = 132) {
                let direction = 4;
            }
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveCell();
            }
        }
            
        return;
	}

    method void moveCell() {
        if (direction = 1) {
            do player.moveUp();
        }
        if (direction = 2) {
            do player.moveDown();
        }
        if (direction = 3) {
            do player.moveLeft();
        }
        if (direction = 4) {
            do player.moveRight();
        }

        do Sys.wait(5); // Delays the next movement.
        return;
    }
}